/**
 * Player Project 
 * Period 2
 * @author Riley Hogue, Alyx Hartman, and Gabe Santana
 */

import java.util.ArrayList;
import java.util.Scanner;

public class PlayerProject 
{

    public static void main(String[] args) 
    {
        Player cloud = new Player(1, 1, 3);   // player to place into the world (direction, speed, x)
        
        World world = new World();              // the World object that contains Player objects
        
        
        world.placePlayer(cloud);
        
        
        Scanner keyboard = new Scanner(System.in);  // keyboard to get human's input
        String command = "";                        // user's input

        while (!(command.equals("exit") || command.equals("e")))
        {
            clearScreen();
            world.display();   
            
            System.out.print("Type attack, magic or guard: ");
            command = keyboard.nextLine();
           
            if (command.equals("attack") || command.equals("a"))
            {
                cloud.attack(); //make attack class
            }
            else if (command.equals("magic") || command.equals("m"))
            {
                System.out.println("Type cure(heal), fire(fire damage), blizzard(ice damage), holy(light damage), or thunder(lightning damage)");
                if (command.equals("cure") || command.equals("c") || command.equals("heal"))
                {
                  cloud.cure(); //make cure class
                }
                  else if (command.equals("fire") || command.equals("f"))
                {
                     cloud.fire(); //make fire class
                }
                  else if (command.equals("blizzard") || command.equals("b") || command.equals("ice"))
                {
                     cloud.blizzard(); //make blizzard class
                }
                  else if (command.equals("holy") || command.equals("h") || command.equals("light"))
                {
                     cloud.holy(); //make holy class
                }
                  else if (command.equals("thunder") || command.equals("t") || command.equals("lightning"))
                {
                     cloud.thunder(); //make thunder class
                }
            }
            else if (command.equals("guard") || command.equals("g"))
            {
               cloud.guard(); //make guard class
            }

        }
        
    }// end of main method
    
    // postcondition: console screen is cleared
    public final static void clearScreen()
    {
        for (int i = 0; i < 25; i++)
        {
            System.out.println();
        }
        
    }// end of clearScreen method
    
}// end of Main (client) class

///////// regular classes //////////////

class Player
{
    // instance variables (properties) *******************
    private int myDirection;   // -1 west, 1 east
    private int myX;           // location on x-axis
    private int myHealthd;       // speed of player
    
    // default constructor *******************************
    
    public Player()
    {
        myDirection = 1;
        myX = 0;
        myHealth = 1;
    }
    
    // other constructor *********************************
    
    public Player(int direction, int x, int speed)
    {
        myDirection = direction;
        myX = x;
        myHealth = health;
    }
    
    // accessor methods (getters) ***********************
    
    public int getDirection()
    {
        return myDirection;
    }
    
    public int getX()
    {
        return myX;
    }

    public int getHealth()
    {
        return myHealth;
    }
 
    // modifier methods (setters or mutators) *************
    
    public void setDirection(int direction)
    {
        myDirection = direction;
    }
    
    public void setX(int x)
    {
        myX = x;
    }

    public void setSpeed(int speed)
    {
        mySpeed = speed;
    }
    
    // interesting methods *****************************
    
    // postcondition: turn to the other direction (1 to -1 and vice versa)
    public void turn()
    {
        myDirection *= -1;
    }
    
    // postcondition: moves one location in current pointed direction
    public void move()
    {
        myX = myX + myDirection * mySpeed;
    }
    
    // TODO: add a toString method here and use it in the client class to 
    // show the state (i.e. status) of the player
    
}// end of Player class

//////////////////////////////////////////////////////
class Boss
{
    // instance variables (properties) *******************
    private int myDirection;   // -1 west, 1 east
    private int myX;           // location on x-axis
    private int mySpeed;       // speed of player
    
    // default constructor *******************************
    
    public Boss()
    {
        myDirection = 1;
        myX = 0;
        mySpeed = 1;
    }
    
    // other constructor *********************************
    
    public Boss(int direction, int x, int speed)
    {
        myDirection = direction;
        myX = x;
        mySpeed = speed;
    }
    
    // accessor methods (getters) ***********************
    
    public int getDirection()
    {
        return myDirection;
    }
    
    public int getX()
    {
        return myX;
    }

    public int getSpeed()
    {
        return mySpeed;
    }
 
    // modifier methods (setters or mutators) *************
    
    public void setDirection(int direction)
    {
        myDirection = direction;
    }
    
    public void setX(int x)
    {
        myX = x;
    }

    public void setSpeed(int speed)
    {
        mySpeed = speed;
    }
    
    // interesting methods *****************************
    
    // postcondition: turn to the other direction (1 to -1 and vice versa)
    public void turn()
    {
        myDirection *= -1;
    }
    
    // postcondition: moves one location in current pointed direction
    public void move()
    {
        myX = myX + myDirection * mySpeed;
    }
    
    // TODO: add a toString method here and use it in the client class to 
    // show the state (i.e. status) of the player
    
}// end of Player class

//////////////////////////////////////////////////////


class World
{
    // instance variables (properties) *******************

    private ArrayList<Player> players;  // list of all Player objects in the World object
    
    // default constructor *******************************

    public World()
    {
        players = new ArrayList();      // instantiating an empty list of players
    }
    
    // interesting methods *****************************
    
    // postcondition: a new player is placed in the world
    public void placePlayer(Player player)
    {
        players.add(player);
    }
    
    // display all the players in the world
    public void display()
    {
        final int SIZE = 21;                // length of the world
        String[] strip = new String[SIZE];  // number line 
        
        for (Player nextPlayer : players)   // looping thru the list of players
        {
            
            if (nextPlayer.getDirection() == 1)       // if current player points east
            {
                strip[nextPlayer.getX() + SIZE / 2] = ">";  // place correct marker into strip at proper place
            }                                               //     adding half the SIZE due to the negative portion of x axis
            else if (nextPlayer.getDirection() == -1)        
            {
                strip[nextPlayer.getX() + SIZE / 2] = "<";
            }
            
        }
        
        // display the world
        System.out.print("\n|");
        
        for (int i = 0; i < strip.length; i++)
        {
            
            if (strip[i] == null)
            {
                System.out.print("-");       // display hyphen if no player
            }
            else
            {
                System.out.print(strip[i]);  // display player as a direction marker
            }
            
        }
        
        System.out.println("|");
    }// end of display method
    
}// end of World class
